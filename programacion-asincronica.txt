//Uso incorrecto de una función asíncrona

// Este ejemplo muestra cómo *no* escribir código Dart asíncrono.

void main(){
String createOrderMessage() {
  var order = fetchUserOrder();
  return 'Your order is: $order';
}

Future<String> fetchUserOrder() =>
    // Imagine that this function is more complex and slow.
    Future.delayed(
      const Duration(seconds: 2),
      () => 'Large Latte',
    );

void main() {
  print(createOrderMessage());
}


//Las operaciones asincrónicas permiten que su programa complete el trabajo mientras espera que finalice otra operación.

//¿Qué es un futuro?

/*Un futuro ("f" minúscula) es una instancia de la clase Futuro 
 ("F" en mayúscula). Un futuro representa el resultado de una operación 
 asíncrona y puede tener dos estados: incompleto o completado. */

/*fetchUserOrder()devuelve un futuro que se completa después de 
 imprimir en la consola. Debido a que no devuelve un valor utilizable, 
 fetchUserOrder()tiene el tipo Future<void>. 
 Antes de ejecutar el ejemplo, intente predecir cuál se 
 imprimirá primero: "Latte grande" o "Buscando pedido de usuario...".*/

Future<void> fetchUserOrder() {
  // Imagine that this function is fetching user info from another service or database.
  return Future.delayed(const Duration(seconds: 2), () => print('Large Latte'));
}

void main() {
  fetchUserOrder();
  print('Fetching user order...');
}
 
//Trabajar con futuros: async y await
  
/*
void main() async { ··· }
  
print(await createOrderMessage()); */
  
//Ejemplo: funciones síncronas
  
String createOrderMessage() {
  var order = fetchUserOrder();
  return 'Your order is: $order';
}

Future<String> fetchUserOrder() =>
    // Imagine that this function is
    // more complex and slow.
    Future.delayed(
      const Duration(seconds: 2),
      () => 'Large Latte',
    );

void main() {
  print('Fetching user order...');
  print(createOrderMessage());
}
  
//Ejemplo: funciones asíncronas
  
Future<String> createOrderMessage() async {
  var order = await fetchUserOrder();
  return 'Your order is: $order';
}

Future<String> fetchUserOrder() =>
    // Imagine that this function is
    // more complex and slow.
    Future.delayed(
      const Duration(seconds: 2),
      () => 'Large Latte',
    );

Future<void> main() async {
  print('Fetching user order...');
  print(await createOrderMessage());
}
  
//Flujo de ejecución con async y await
  
/*Una asyncfunción se ejecuta sincrónicamente hasta la 
 primera awaitpalabra clave. Esto significa que dentro del 
 asynccuerpo de una función, todo el código síncrono antes de la 
 primera awaitpalabra clave se ejecuta inmediatamente.*/
  
 //Ejemplo: Ejecución dentro de funciones asíncronas
  
Future<void> printOrderMessage() async {
  print('Awaiting user order...');
  var order = await fetchUserOrder();
  print('Your order is: $order');
}

Future<String> fetchUserOrder() {
  // Imagine that this function is more complex and slow.
  return Future.delayed(const Duration(seconds: 4), () => 'Large Latte');
}

void main() async {
  countSeconds(4);
  await printOrderMessage();
}

// You can ignore this function - it's here to visualize delay time in this example.
void countSeconds(int s) {
  for (var i = 1; i <= s; i++) {
    Future.delayed(Duration(seconds: i), () => print(i));
  }
}
  
//Ejemplo: async y await con try-catch
  
Future<void> printOrderMessage() async {
  try {
    print('Awaiting user order...');
    var order = await fetchUserOrder();
    print(order);
  } catch (err) {
    print('Caught error: $err');
  }
}

Future<String> fetchUserOrder() {
  // Imagine that this function is more complex.
  var str = Future.delayed(
      const Duration(seconds: 4),
      () => throw 'Cannot locate user order');
  return str;
}

void main() async {
  await printOrderMessage();
}
  
// asyncy awaitpara implementar una changeUsername()función asíncrona
  
Future<String> changeUsername() async {
  try {
    return await fetchNewUsername();
  } catch (err) {
    return err.toString();
  }
}
  
//Ejercicio: poner todo junto
//Parte 1:addHello()
//Parte 2:greetUser()
//Parte 3:sayGoodbye()
  
String addHello(String user) => 'Hello $user';

Future<String> greetUser() async {
  var username = await fetchUsername();
  return addHello(username);
}

Future<String> sayGoodbye() async {
  try {
    var result = await logoutUser();
    return '$result Thanks, see you next time';
  } catch (e) {
    return 'Failed to logout user: $e';
  }
}  

}


